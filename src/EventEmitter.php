<?php declare(strict_types = 1);

namespace Cspray\Labrador\AsyncEvent;

use Amp\Promise;

/**
 * Represents an object that allows listeners to respond to emitted events asynchronously.
 *
 * @package Cspray\Labrador\AsyncEvent
 */
interface EventEmitter {

    /**
     * Invoke a listener every time an Event with a name matching $event is emitted; any data passed to $listenerData
     * will be passed to the $listener after the Event argument.
     *
     * Each $listener is invoked within the context of a running event loop. The specific signature for an event
     * $listener looks like:
     *
     * function(Event $event, array $listenerData) : Promise<void>|Generator|void {}
     *
     * The string returned is a unique listener ID that can be used to turn off an event listener with off().
     *
     * @param string $event
     * @param callable $listener
     * @param array $listenerData
     * @return string
     */
    public function on(string $event, callable $listener, array $listenerData = []) : string;

    /**
     * Turns off a listener that is identified by $listenerId; this value should be one returned from on() or once().
     *
     * @param string $listenerId
     * @return void
     */
    public function off(string $listenerId) : void;

    /**
     * Ensures that a $listener is only executed one time the next time the event is emitted; after the event is
     * emitted this listener will be removed.
     *
     * The specific signature for an event $listener looks like:
     *
     * function(Event $event, array $listenerData) : Promise<void>|Generator|void {}
     *
     * Each $listener is invoked within the context of a running event loop.
     *
     * The returned string is an id that can identify this listener to turn off. Please note that unlike listeners
     * attached with on() there's a limited window for explicit removal of a once() listener.
     *
     * @param string $event
     * @param callable $listener
     * @param array $listenerData
     * @return string
     */
    public function once(string $event, callable $listener, array $listenerData = []) : string;

    /**
     * Causes all registered listeners for $event->name() to be invoked; the Promises generated by registered listeners
     * will be combined using the passed $promiseCombinator or the default PromiseCombinator.
     *
     * This method allows events to be fired in a way that allows calling code to fire-and-forget or "wait" until all
     * listener Promises have resolved according to the PromiseCombinator used. If you need to ensure that all listeners
     * have had a chance to react to the emitted event simply yield the returned Promise (and make sure you're using
     * the correct PromiseCombinator for your use case).
     *
     * Generally speaking you should not rely on values resolved from the returned Promise; they will be dependent on
     * the exact PromiseCombinator used. If you are relying on the return values of yielded Promises you should always
     * pass in an explicit PromiseCombinator, even if it matches the default PromiseCombinator, to ensure your code is
     * easy to understand. It is also future proof in case the default PromiseCombinator changes in the future.
     *
     * @param Event $event
     * @param PromiseCombinator|null $promiseCombinator
     * @return Promise<mixed>
     */
    public function emit(Event $event, PromiseCombinator $promiseCombinator = null) : Promise;

    /**
     * Return the number of listeners registered for a specific event.
     *
     * @param string $event
     * @return int
     */
    public function listenerCount(string $event) : int;

    /**
     * Returns a Map of lister information for a given $event.
     *
     * The key for the map will be the listener id return from on() or once() and the value for that key is a Pair that
     * represents the handler and any listenerData that was passed at time of listener registration.
     *
     * @param string $event
     * @return array<string, array<callable, array<mixed>>>
     */
    public function listeners(string $event) : array;

    /**
     * Returns the default PromiseCombinator that is to be used if an explicit PromiseCombinator is not passed to
     * emit().
     *
     * This SHOULD be PromiseCombinator::All() unless specifically overridden in calls to setDefaultPromiseCombinator or
     * the constructor for the implemented EventEmitter.
     *
     * @return PromiseCombinator
     */
    public function getDefaultPromiseCombinator() : PromiseCombinator;

    /**
     * Overrides the default PromiseCombinator.
     *
     * @param PromiseCombinator $promiseCombinator
     */
    public function setDefaultPromiseCombinator(PromiseCombinator $promiseCombinator) : void;
}
